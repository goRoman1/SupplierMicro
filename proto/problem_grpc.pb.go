// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: supplier.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProblemServiceClient is the client API for ProblemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemServiceClient interface {
	AddNewProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Response, error)
	UpdateProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Response, error)
	DeleteProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Response, error)
	GetProblemByID(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error)
	GetAllProblems(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error)
	GetProblemsByTypeID(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error)
	GetProblemsByUserID(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error)
	GetProblemsBySolved(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error)
	GetProblemsByTimePeriod(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error)
	GetProblemTypeByID(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error)
	GetAllProblemTypes(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error)
	AddProblemSolution(ctx context.Context, in *ProblemSolution, opts ...grpc.CallOption) (*Response, error)
	GetSolutionByProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Response, error)
}

type problemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemServiceClient(cc grpc.ClientConnInterface) ProblemServiceClient {
	return &problemServiceClient{cc}
}

func (c *problemServiceClient) AddNewProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/AddNewProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/UpdateProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) DeleteProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/DeleteProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemByID(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetProblemByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetAllProblems(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetAllProblems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemsByTypeID(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetProblemsByTypeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemsByUserID(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetProblemsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemsBySolved(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetProblemsBySolved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemsByTimePeriod(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetProblemsByTimePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemTypeByID(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetProblemTypeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetAllProblemTypes(ctx context.Context, in *ProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetAllProblemTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) AddProblemSolution(ctx context.Context, in *ProblemSolution, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/AddProblemSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetSolutionByProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/problem.ProblemService/GetSolutionByProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemServiceServer is the server API for ProblemService service.
// All implementations must embed UnimplementedProblemServiceServer
// for forward compatibility
type ProblemServiceServer interface {
	AddNewProblem(context.Context, *Problem) (*Response, error)
	UpdateProblem(context.Context, *Problem) (*Response, error)
	DeleteProblem(context.Context, *Problem) (*Response, error)
	GetProblemByID(context.Context, *ProblemRequest) (*Response, error)
	GetAllProblems(context.Context, *ProblemRequest) (*Response, error)
	GetProblemsByTypeID(context.Context, *ProblemRequest) (*Response, error)
	GetProblemsByUserID(context.Context, *ProblemRequest) (*Response, error)
	GetProblemsBySolved(context.Context, *ProblemRequest) (*Response, error)
	GetProblemsByTimePeriod(context.Context, *ProblemRequest) (*Response, error)
	GetProblemTypeByID(context.Context, *ProblemRequest) (*Response, error)
	GetAllProblemTypes(context.Context, *ProblemRequest) (*Response, error)
	AddProblemSolution(context.Context, *ProblemSolution) (*Response, error)
	GetSolutionByProblem(context.Context, *Problem) (*Response, error)
	mustEmbedUnimplementedProblemServiceServer()
}

// UnimplementedProblemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProblemServiceServer struct {
}

func (UnimplementedProblemServiceServer) AddNewProblem(context.Context, *Problem) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewProblem not implemented")
}
func (UnimplementedProblemServiceServer) UpdateProblem(context.Context, *Problem) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedProblemServiceServer) DeleteProblem(context.Context, *Problem) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemByID(context.Context, *ProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemByID not implemented")
}
func (UnimplementedProblemServiceServer) GetAllProblems(context.Context, *ProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProblems not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemsByTypeID(context.Context, *ProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemsByTypeID not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemsByUserID(context.Context, *ProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemsByUserID not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemsBySolved(context.Context, *ProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemsBySolved not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemsByTimePeriod(context.Context, *ProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemsByTimePeriod not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemTypeByID(context.Context, *ProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemTypeByID not implemented")
}
func (UnimplementedProblemServiceServer) GetAllProblemTypes(context.Context, *ProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProblemTypes not implemented")
}
func (UnimplementedProblemServiceServer) AddProblemSolution(context.Context, *ProblemSolution) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProblemSolution not implemented")
}
func (UnimplementedProblemServiceServer) GetSolutionByProblem(context.Context, *Problem) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolutionByProblem not implemented")
}
func (UnimplementedProblemServiceServer) mustEmbedUnimplementedProblemServiceServer() {}

// UnsafeProblemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemServiceServer will
// result in compilation errors.
type UnsafeProblemServiceServer interface {
	mustEmbedUnimplementedProblemServiceServer()
}

func RegisterProblemServiceServer(s grpc.ServiceRegistrar, srv ProblemServiceServer) {
	s.RegisterService(&ProblemService_ServiceDesc, srv)
}

func _ProblemService_AddNewProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Problem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).AddNewProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/AddNewProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).AddNewProblem(ctx, req.(*Problem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Problem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/UpdateProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateProblem(ctx, req.(*Problem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Problem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/DeleteProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).DeleteProblem(ctx, req.(*Problem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetProblemByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemByID(ctx, req.(*ProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetAllProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetAllProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetAllProblems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetAllProblems(ctx, req.(*ProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemsByTypeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemsByTypeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetProblemsByTypeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemsByTypeID(ctx, req.(*ProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetProblemsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemsByUserID(ctx, req.(*ProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemsBySolved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemsBySolved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetProblemsBySolved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemsBySolved(ctx, req.(*ProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemsByTimePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemsByTimePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetProblemsByTimePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemsByTimePeriod(ctx, req.(*ProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetProblemTypeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemTypeByID(ctx, req.(*ProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetAllProblemTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetAllProblemTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetAllProblemTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetAllProblemTypes(ctx, req.(*ProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_AddProblemSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemSolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).AddProblemSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/AddProblemSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).AddProblemSolution(ctx, req.(*ProblemSolution))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetSolutionByProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Problem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetSolutionByProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/problem.ProblemService/GetSolutionByProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetSolutionByProblem(ctx, req.(*Problem))
	}
	return interceptor(ctx, in, info, handler)
}

// ProblemService_ServiceDesc is the grpc.ServiceDesc for ProblemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProblemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "problem.ProblemService",
	HandlerType: (*ProblemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewProblem",
			Handler:    _ProblemService_AddNewProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _ProblemService_UpdateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _ProblemService_DeleteProblem_Handler,
		},
		{
			MethodName: "GetProblemByID",
			Handler:    _ProblemService_GetProblemByID_Handler,
		},
		{
			MethodName: "GetAllProblems",
			Handler:    _ProblemService_GetAllProblems_Handler,
		},
		{
			MethodName: "GetProblemsByTypeID",
			Handler:    _ProblemService_GetProblemsByTypeID_Handler,
		},
		{
			MethodName: "GetProblemsByUserID",
			Handler:    _ProblemService_GetProblemsByUserID_Handler,
		},
		{
			MethodName: "GetProblemsBySolved",
			Handler:    _ProblemService_GetProblemsBySolved_Handler,
		},
		{
			MethodName: "GetProblemsByTimePeriod",
			Handler:    _ProblemService_GetProblemsByTimePeriod_Handler,
		},
		{
			MethodName: "GetProblemTypeByID",
			Handler:    _ProblemService_GetProblemTypeByID_Handler,
		},
		{
			MethodName: "GetAllProblemTypes",
			Handler:    _ProblemService_GetAllProblemTypes_Handler,
		},
		{
			MethodName: "AddProblemSolution",
			Handler:    _ProblemService_AddProblemSolution_Handler,
		},
		{
			MethodName: "GetSolutionByProblem",
			Handler:    _ProblemService_GetSolutionByProblem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supplier.proto",
}
